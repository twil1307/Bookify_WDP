#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('slot4:server');
var http = require('http');
// const { wss } = require("../app");
let ID_GENERATOR = 1;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.DEV_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// wss.on('connection', (ws, request) => {

//     //connection is up, let's add a simple simple event
//     ws.on('message', (message) => {
//         //log the received message and send it back to the client
//         console.log('received: %s', message);
//         wss.clients.forEach(client => {
//             if (client !== ws && client.readyState === WebSocket.OPEN) {
//                 console.log(client.id)
//                 client.send(`ID ${client.id}, ${message}`)
//             }
//         })

//     });

//     //send immediatly a feedback to the incoming connection    
//     ws.send('Hi there, I am a WebSocket server');
// });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, process.env.DEV_HOSTNAME, () => {
    console.log(
        `Server running at http://${process.env.DEV_HOSTNAME}:${port}`
    );
});

server.on('error', onError);
server.on('listening', onListening);
// server.on('upgrade', onUpgrading);

/**
*
Normalize a port into a number, string, or false.*/

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onUpgrading(req, socket, head) {
//     wss.handleUpgrade(req, socket, head, (ws) => {
//         ws.id = ID_GENERATOR
//         ID_GENERATOR++;
//         wss.emit('connection', ws, req)
//     })
// }

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}